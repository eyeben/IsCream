services:
  nginx:
    image: nginx:latest
    container_name: nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./Frontend/IsCream/dist:/usr/share/nginx/html  # React 빌드 결과물
      - /etc/letsencrypt:/etc/letsencrypt
    depends_on:
      - backend
      - ai-server
    networks:
      - mynetwork

  backend:
    build:
      context: ./Backend/IsCream
      dockerfile: Dockerfile
    restart: always
    deploy:
      replicas: 2  # ✅ 백엔드 컨테이너 2개 실행하여 부하 분산
      restart_policy:
        condition: on-failure
    expose:
      - "8080"  # ✅ Nginx 내부에서만 접근 가능하도록 설정
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    networks:
      - mynetwork

  ai-server:
    build:
      context: ./AI
      dockerfile: Dockerfile
    restart: always
    deploy:
      replicas: 2  # ✅ AI 컨테이너 2개 실행하여 부하 분산
      restart_policy:
        condition: on-failure
    expose:
      - "8000"  # ✅ Nginx 내부에서만 접근 가능하도록 설정
    volumes:
      - /home/ubuntu/models:/home/ubuntu/models
    environment:
      - OPENAI_API_KEY=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
    networks:
      - mynetwork

networks:
  mynetwork:
    driver: bridge
